//Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
//
// For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
//
//
//    1
//   / \
//  2   2
// / \ / \
//3  4 4  3
//
//
//
//
// But the following [1,2,2,null,3,null,3] is not:
//
//
//    1
//   / \
//  2   2
//   \   \
//   3    3
//
//
//
//
// Note:
//Bonus points if you could solve it both recursively and iteratively.
//

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
     public boolean isSymmetric(TreeNode root) {
//     First came up in my mind: BFS -- Iteratively -- Level order traversal
//     Maintain a queue to store the tree
//     Every level maintain a stack to check the symmetry
//     Time limit exceeded -- cannot resolve the problem in second situation

         if (root == null) return true;
s
         Queue<TreeNode> queue = new LinkedList<>();
         if (root.left != null) {
             if (root.right == null) return false;
             queue.add(root.left);
             queue.add(root.right);
         }

         else if (root.right != null)
             return false;

         Stack<TreeNode> stack = new Stack<>();

         while(queue != null){
             int currLevelSize = queue.size();
             if (currLevelSize % 2 != 0) return false;

             for (int i = 0; i < currLevelSize; i ++){
                 TreeNode node = queue.poll();
                 if (node.left != null) queue.add(node.left);
                 if (node.right != null) queue.add(node.right);

                 if (i < currLevelSize / 2)
                     stack.push(node);
                 else
                     if (stack.pop().val != node.val)
                         return false;
             }
         }
         return true;


//     Solution 2 -- Iteratively -- faster than 32%
//     Directly maintain a stack or queue (either is OK)
//     Always stores the symmetric two nodes in the tree into the fisrt two elements of stack/queue
         if (root == null) return true;

         Queue<TreeNode> q = new LinkedList();

         q.add(root.left);
         q.add(root.right);

         while(!q.isEmpty()){
             TreeNode left = q.poll();
             TreeNode right = q.poll();

             if(left == null && right == null)
                 continue;
             if(left == null || right == null ||left.val != right.val )
                 return false;
             // Store the node in symmetric way
             q.add(left.left);
             q.add(right.right);
             q.add(left.right);
             q.add(right.left);

         }
         return true;

     }

    // Solution 3 -- Recursively -- faster than 100%
    public boolean isSymmetric(TreeNode root) {
        return root==null || isSymmetricHelp(root.left, root.right);
    }

    private boolean isSymmetricHelp(TreeNode left, TreeNode right){
        if(left==null || right==null)
            return left==right;
        if(left.val!=right.val)
            return false;
        return isSymmetricHelp(left.left, right.right) && isSymmetricHelp(left.right, right.left);
    }
}